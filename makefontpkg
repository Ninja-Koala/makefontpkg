#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from __future__ import print_function
import os
import re
import shutil
import sys
import tempfile
from subprocess import CalledProcessError, check_call
from argparse import ArgumentParser


class TempDir(object):
    """A context representing a temporary directory, which is deleted upon
    exiting the context."""

    def __init__(self, *args, **kwargs):
        """Make a temporary directory.  The parameters of this function is
        identical to that of `tempfile.mkdtemp`."""
        self.dirname = tempfile.mkdtemp(*args, **kwargs)

    def __enter__(self):
        """Return the path to the temporary directory."""
        return self.dirname

    def __exit__(self, type, value, traceback):
        """Remove the temporary directory."""
        shutil.rmtree(self.dirname, ignore_errors=True)


class WorkDir(object):
    """A context for changing to a different working directory.  The original
    working directory is restored upon exiting the context."""

    def __init__(self, path):
        """Change to a different working directory."""
        self.prevdir = os.getcwd()
        os.chdir(path)

    def __enter__(self):
        """Return the path to the previous working directory."""
        return self.prevdir

    def __exit__(self, type, value, traceback):
        """Restore the the temporary directory."""
        os.chdir(self.prevdir)


class UserError(Exception):
    pass


def main():
    parser = ArgumentParser(
        description="Create font package from TTF or OTF file.",
        prog="makefontpkg",
    )

    action = parser.add_mutually_exclusive_group()

    action.add_argument("-i", "--install",
                        action="store_true", dest="install", default=False,
                        help="directly install the package")

    action.add_argument("-s", "--source",
                        action="store_true", dest="source", default=False,
                        help="make a source-only tarball")

    parser.add_argument("FILE", nargs=1, action="store",
                        help="TTF or OTF file")

    args = parser.parse_args()

    # parse and validate the font
    fontpath = args.FILE[0]
    fontabspath = os.path.abspath(fontpath)
    fontfile = os.path.basename(fontpath)
    fontname, fontextension = os.path.splitext(fontfile)
    fonttype = fontextension[1:].upper()
    if fonttype not in ("TTF", "OTF"):
        msg = "Doesn't appear to be a TrueType or OpenType font: "
        raise UserError(msg + fontpath)

    # generate and sanitize the package name
    pkgname = scrubpkgname(fontname)

    with TempDir() as tempdir, WorkDir(tempdir) as prevdir:
        copyfile(fontabspath, ".")

        pkg = {
            "fonttype":  fonttype,
            "fontfile":  shellescape(fontfile),
            "fontname":  shellescape(fontname),
            "pkgname":   pkgname,
            "pkgver":    "1.0",
            "pkgrel":    "1",
            "pkgdesc":   shellescape(fontname) + " custom font",
            "arch":      "any",
        }
        generatepkgbuild(pkg)
        generatedotinstall(pkg)

        if args.install:
            check_call(("makepkg", "-i"))

        elif args.source:
            check_call(("makepkg", "-S"))
            outname = "{pkgname}-{pkgver}-{pkgrel}.src.tar.gz"
            copyfile(outname.format(**pkg), prevdir)

        else:
            check_call(("makepkg",))
            outname = "{pkgname}-{pkgver}-{pkgrel}-{arch}.pkg.tar.xz"
            copyfile(outname.format(**pkg), prevdir)


def generatepkgbuild(pkg):
    """Generate the `PKGBUILD`."""
    pkgbuild = """
pkgname={pkgname}
pkgver={pkgver}
pkgrel={pkgrel}
depends=(fontconfig xorg-font-utils)
pkgdesc="{pkgdesc}"
arch=({arch})

source=("{fontfile}")
md5sums=()

install=$pkgname.install

package() {{
  install -Dm644 "$srcdir/{fontfile}" \
"$pkgdir/usr/share/fonts/{fonttype}/{fontfile}"
}}
"""[1:]
    pkgbuild = pkgbuild.format(**pkg)
    writefile("PKGBUILD", pkgbuild)
    check_call(("updpkgsums"))


def generatedotinstall(pkg):
    """Generate the `$pkgname.install`."""
    dotinstall = """
post_install() {{
  echo Updating font cache...
  fc-cache >/dev/null -f
  mkfontscale /usr/share/fonts/{fonttype}
  mkfontdir   /usr/share/fonts/{fonttype}
}}

post_upgrade() {{
  post_install
}}

post_remove() {{
  post_install
}}
"""[1:]
    dotinstall = dotinstall.format(**pkg)
    writefile(pkg["pkgname"] + ".install", dotinstall)


def shellescape(string, quote_type='"'):
    """Escapes the string using shell script syntax."""
    if quote_type == '"':
        return (string.replace("\\", r"\\")
                      .replace('"',  r'\"')
                      .replace("$",  r"\$")
                      .replace("`",  r"\`")
                      .replace("!", '"\'!\'"'))
    elif quote_type == "'":
        return string.replace("'", "'\"'\"'")
    else:
        raise ValueError("bad quote_type: {0}".format(repr(quote_type)))


def scrubpkgname(name):
    """Remove all forbidden characters from the package name.  If there are no
    characters remaining, it is replaced with "@".  If the name is different
    from the original, a warning is printed."""
    newname = "-".join(re.findall("[a-z0-9@._+]+", name.lower())) or "_"
    if name != newname:
        msg = ("WARNING: package name is not valid: {0}\n" +
               "         using this instead: {1}")
        print(msg.format(name, newname), file=sys.stderr)
    return newname


def copyfile(name, destdir):
    """Copy a file to another directory, raising `UserError` if it fails."""
    try:
        shutil.copy(name, destdir if destdir.endswith("/") else destdir + "/")
    except OSError as e:
        raise UserError(str(e))


def writefile(filename, contents):
    """Write a string to a file."""
    with open(filename, "w") as f:
        f.write(contents)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("Interrupted... ", file=sys.stderr)
        sys.exit(130)
    except (CalledProcessError, UserError) as e:
        print(str(e), file=sys.stderr)
        sys.exit(2)
