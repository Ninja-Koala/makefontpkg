#!/usr/bin/env python
# -*- encoding: utf-8 -*-

import os
import hashlib

from subprocess import call
from argparse import ArgumentParser


def main():
    parser = ArgumentParser(description="Create font package from TTF or OTF file", prog="makefontpkg")

    parser.add_argument("-s", "--source",
                        action="store_true", dest="source", default=False,
                        help="make a source package for the AUR")

    parser.add_argument("-i", "--install",
                        action="store_true", dest="install", default=False,
                        help="directly install the package with pacman")

    parser.add_argument("font_file_path", nargs=1, action="store",
                        help="path/to/.ttf/or/.otf/file")

    args = parser.parse_args()

    fontpath = args.font_file_path[0]
    fontfile = os.path.basename(fontpath)
    fontname, fontextension = os.path.splitext(fontfile)
    fonttype = fontextension[1:].upper()

    if os.path.exists(fontpath) and (fonttype == "TTF" or fonttype == "OTF"):
        call(["cp", fontpath, "./"])

        generatepkgbuild(fontpath)
        generatedotinstall(fontpath)

        if args.install:
            makepkg()

            call(["sudo", "pacman", "-U", fontname + "-1.0-1-any.pkg.tar.xz"])
        elif args.source:
            makepkgsource()
        else:
            makepkg()

        clean(fontpath)
    else:
        print("Are you really sure this file is a TrueType or OpenType font and exists?")


def generatepkgbuild(fontpath):
    pkgbuild = ("pkgname=$$FONTNAME$$\n" +
                "pkgver=1.0\n" +
                "pkgrel=1\n" +
                "depends=('fontconfig' 'xorg-font-utils')\n" +
                "pkgdesc=\"$$FONTNAME$$ custom font\"\n" +
                "arch=('any')\n" +
                "\n" +
                "source=($$FONTFILE$$)\n" +
                "md5sums=(\"$$MD5SUM$$\")\n" +
                "\n" +
                "install=$pkgname.install\n" +
                "\n" +
                "package() {\n" +
                "  install -d \"$pkgdir/usr/share/fonts/$$FONTTYPE$$\"\n" +
                "  cp -dpr --no-preserve=ownership \"$srcdir/$$FONTFILE$$\" \"$pkgdir/usr/share/fonts/$$FONTTYPE$$/\"\n" +
                "}\n")

    fontfile = os.path.basename(fontpath)
    fontname, fontextension = os.path.splitext(fontfile)
    fonttype = fontextension[1:].upper()
    md5sum = hashfile(fontpath, hashlib.md5())

    pkgbuild = pkgbuild.replace("$$FONTFILE$$", fontfile)
    pkgbuild = pkgbuild.replace("$$FONTNAME$$", fontname)
    pkgbuild = pkgbuild.replace("$$MD5SUM$$", md5sum)
    pkgbuild = pkgbuild.replace("$$FONTTYPE$$", fonttype)

    openedpkgbuild = open("PKGBUILD", "w+")
    openedpkgbuild.write(pkgbuild)
    openedpkgbuild.close()


def hashfile(fontpath, hasher, blocksize=65536):
    openedfont = open(fontpath, "rb")
    filebuffer = openedfont.read(blocksize)

    while len(filebuffer) > 0:
        hasher.update(filebuffer)
        filebuffer = openedfont.read(blocksize)

    openedfont.close()

    return hasher.hexdigest()


def generatedotinstall(fontpath):
    dotinstall = ("post_install() {\n" +
                  "  echo -n \"Updating font cache... \"\n" +
                  "  fc-cache -fs > /dev/null\n" +
                  "  mkfontscale /usr/share/fonts/$$FONTTYPE$$ /usr/share/fonts/Type1\n" +
                  "  mkfontdir /usr/share/fonts/$$FONTTYPE$$ /usr/share/fonts/Type1\n" +
                  "  echo \"Done. \"\n" +
                  "}\n" +
                  "\n" +
                  "post_upgrade() {\n" +
                  "  post_install\n" +
                  "}\n" +
                  "\n" +
                  "post_remove() {\n" +
                  "  post_install\n" +
                  "}\n")

    fontfile = os.path.basename(fontpath)
    fontname, fontextension = os.path.splitext(fontfile)
    fonttype = fontextension[1:].upper()

    dotinstall = dotinstall.replace("$$FONTTYPE$$", fonttype)

    openeddotinstall = open(fontname + ".install", "w+")
    openeddotinstall.write(dotinstall)
    openeddotinstall.close()


def makepkg():
    call(["makepkg", "-f"])


def makepkgsource():
    call(["makepkg", "-f", "--source"])


def clean(fontpath):
    fontfile = os.path.basename(fontpath)
    fontname, _ = os.path.splitext(fontfile)

    if os.path.exists("src"):
        call(["rm", "-r", "src"])

    if os.path.exists("pkg"):
        call(["rm", "-r", "pkg"])

    if os.path.exists("PKGBUILD"):
        call(["rm", "PKGBUILD"])

    if os.path.exists(fontname + ".install"):
        call(["rm", fontname + ".install"])


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Interrupted... ")
